<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <Version>0.3.11</Version>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;MSB3277</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;MSB3277</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="cairo-sharp">
      <HintPath>$(VINTAGE_STORY)\Lib\cairo-sharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>$(VINTAGE_STORY)\Lib\Newtonsoft.Json.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="protobuf-net">
      <HintPath>$(VINTAGE_STORY)\Lib\protobuf-net.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="VintagestoryAPI">
      <HintPath>$(VINTAGE_STORY)\VintagestoryAPI.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="VintagestoryLib">
      <HintPath>$(VINTAGE_STORY)\VintagestoryLib.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="VSEssentials">
      <HintPath>$(VINTAGE_STORY)\Mods\VSEssentials.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="VSSurvivalMod">
      <HintPath>$(VINTAGE_STORY)\Mods\VSSurvivalMod.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="0Harmony">
      <HintPath>$(VINTAGE_STORY)/Lib/0Harmony.dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <!-- In a csproj, items are a kind of variable that can hold a filename
         list. Setting an item is a way to evaluate a filename glob. Items are
         read with the syntax: @(name).

         Items can only be set inside of a ItemGroup element. Because this
         ItemGroup is inside a Target, the items will be evaluated when the
         target is run, instead of when the csproj is loaded. This is
         important, because the target files (including the output dll) may
         not exist when the csproj is first loaded.

         This pattern is documented at
         https://learn.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2022.
        -->

    <ItemGroup>
      <!-- The name of the item (kind of variable) is given in the element name.

            Full syntax:
            https://learn.microsoft.com/en-us/visualstudio/msbuild/item-element-msbuild?view=vs-2022

          -->
      <TargetFiles Include="$(TargetDir)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(TargetFiles)" DestinationFolder="$(MSBuildProjectDirectory)\..\..\mod" SkipUnchangedFiles="true" />
  </Target>

</Project>
